// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for TransactionType.
const (
	Expense TransactionType = "expense"
	Income  TransactionType = "income"
)

// Transaction defines model for Transaction.
type Transaction struct {
	Amount   float32         `json:"amount"`
	Category string          `json:"category"`
	Type     TransactionType `json:"type"`
}

// TransactionType defines model for Transaction.Type.
type TransactionType string

// PostTransactionsJSONRequestBody defines body for PostTransactions for application/json ContentType.
type PostTransactionsJSONRequestBody = Transaction

// PutTransactionsTransactionIdJSONRequestBody defines body for PutTransactionsTransactionId for application/json ContentType.
type PutTransactionsTransactionIdJSONRequestBody = Transaction

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetTransactions request
	GetTransactions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTransactionsWithBody request with any body
	PostTransactionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTransactions(ctx context.Context, body PostTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTransactionsTransactionId request
	DeleteTransactionsTransactionId(ctx context.Context, transactionId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTransactionsTransactionId request
	GetTransactionsTransactionId(ctx context.Context, transactionId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTransactionsTransactionIdWithBody request with any body
	PutTransactionsTransactionIdWithBody(ctx context.Context, transactionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTransactionsTransactionId(ctx context.Context, transactionId int, body PutTransactionsTransactionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetTransactions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTransactionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTransactionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTransactionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTransactions(ctx context.Context, body PostTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTransactionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTransactionsTransactionId(ctx context.Context, transactionId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTransactionsTransactionIdRequest(c.Server, transactionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTransactionsTransactionId(ctx context.Context, transactionId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTransactionsTransactionIdRequest(c.Server, transactionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTransactionsTransactionIdWithBody(ctx context.Context, transactionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTransactionsTransactionIdRequestWithBody(c.Server, transactionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTransactionsTransactionId(ctx context.Context, transactionId int, body PutTransactionsTransactionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTransactionsTransactionIdRequest(c.Server, transactionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetTransactionsRequest generates requests for GetTransactions
func NewGetTransactionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transactions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTransactionsRequest calls the generic PostTransactions builder with application/json body
func NewPostTransactionsRequest(server string, body PostTransactionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTransactionsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTransactionsRequestWithBody generates requests for PostTransactions with any type of body
func NewPostTransactionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transactions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTransactionsTransactionIdRequest generates requests for DeleteTransactionsTransactionId
func NewDeleteTransactionsTransactionIdRequest(server string, transactionId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "transactionId", runtime.ParamLocationPath, transactionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transactions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTransactionsTransactionIdRequest generates requests for GetTransactionsTransactionId
func NewGetTransactionsTransactionIdRequest(server string, transactionId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "transactionId", runtime.ParamLocationPath, transactionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transactions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTransactionsTransactionIdRequest calls the generic PutTransactionsTransactionId builder with application/json body
func NewPutTransactionsTransactionIdRequest(server string, transactionId int, body PutTransactionsTransactionIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTransactionsTransactionIdRequestWithBody(server, transactionId, "application/json", bodyReader)
}

// NewPutTransactionsTransactionIdRequestWithBody generates requests for PutTransactionsTransactionId with any type of body
func NewPutTransactionsTransactionIdRequestWithBody(server string, transactionId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "transactionId", runtime.ParamLocationPath, transactionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transactions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetTransactionsWithResponse request
	GetTransactionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTransactionsResponse, error)

	// PostTransactionsWithBodyWithResponse request with any body
	PostTransactionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTransactionsResponse, error)

	PostTransactionsWithResponse(ctx context.Context, body PostTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTransactionsResponse, error)

	// DeleteTransactionsTransactionIdWithResponse request
	DeleteTransactionsTransactionIdWithResponse(ctx context.Context, transactionId int, reqEditors ...RequestEditorFn) (*DeleteTransactionsTransactionIdResponse, error)

	// GetTransactionsTransactionIdWithResponse request
	GetTransactionsTransactionIdWithResponse(ctx context.Context, transactionId int, reqEditors ...RequestEditorFn) (*GetTransactionsTransactionIdResponse, error)

	// PutTransactionsTransactionIdWithBodyWithResponse request with any body
	PutTransactionsTransactionIdWithBodyWithResponse(ctx context.Context, transactionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTransactionsTransactionIdResponse, error)

	PutTransactionsTransactionIdWithResponse(ctx context.Context, transactionId int, body PutTransactionsTransactionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTransactionsTransactionIdResponse, error)
}

type GetTransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Transaction
}

// Status returns HTTPResponse.Status
func (r PostTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTransactionsTransactionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTransactionsTransactionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTransactionsTransactionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTransactionsTransactionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Transaction
}

// Status returns HTTPResponse.Status
func (r GetTransactionsTransactionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTransactionsTransactionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTransactionsTransactionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Transaction
}

// Status returns HTTPResponse.Status
func (r PutTransactionsTransactionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTransactionsTransactionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetTransactionsWithResponse request returning *GetTransactionsResponse
func (c *ClientWithResponses) GetTransactionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTransactionsResponse, error) {
	rsp, err := c.GetTransactions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTransactionsResponse(rsp)
}

// PostTransactionsWithBodyWithResponse request with arbitrary body returning *PostTransactionsResponse
func (c *ClientWithResponses) PostTransactionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTransactionsResponse, error) {
	rsp, err := c.PostTransactionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTransactionsResponse(rsp)
}

func (c *ClientWithResponses) PostTransactionsWithResponse(ctx context.Context, body PostTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTransactionsResponse, error) {
	rsp, err := c.PostTransactions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTransactionsResponse(rsp)
}

// DeleteTransactionsTransactionIdWithResponse request returning *DeleteTransactionsTransactionIdResponse
func (c *ClientWithResponses) DeleteTransactionsTransactionIdWithResponse(ctx context.Context, transactionId int, reqEditors ...RequestEditorFn) (*DeleteTransactionsTransactionIdResponse, error) {
	rsp, err := c.DeleteTransactionsTransactionId(ctx, transactionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTransactionsTransactionIdResponse(rsp)
}

// GetTransactionsTransactionIdWithResponse request returning *GetTransactionsTransactionIdResponse
func (c *ClientWithResponses) GetTransactionsTransactionIdWithResponse(ctx context.Context, transactionId int, reqEditors ...RequestEditorFn) (*GetTransactionsTransactionIdResponse, error) {
	rsp, err := c.GetTransactionsTransactionId(ctx, transactionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTransactionsTransactionIdResponse(rsp)
}

// PutTransactionsTransactionIdWithBodyWithResponse request with arbitrary body returning *PutTransactionsTransactionIdResponse
func (c *ClientWithResponses) PutTransactionsTransactionIdWithBodyWithResponse(ctx context.Context, transactionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTransactionsTransactionIdResponse, error) {
	rsp, err := c.PutTransactionsTransactionIdWithBody(ctx, transactionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTransactionsTransactionIdResponse(rsp)
}

func (c *ClientWithResponses) PutTransactionsTransactionIdWithResponse(ctx context.Context, transactionId int, body PutTransactionsTransactionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTransactionsTransactionIdResponse, error) {
	rsp, err := c.PutTransactionsTransactionId(ctx, transactionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTransactionsTransactionIdResponse(rsp)
}

// ParseGetTransactionsResponse parses an HTTP response from a GetTransactionsWithResponse call
func ParseGetTransactionsResponse(rsp *http.Response) (*GetTransactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostTransactionsResponse parses an HTTP response from a PostTransactionsWithResponse call
func ParsePostTransactionsResponse(rsp *http.Response) (*PostTransactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Transaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteTransactionsTransactionIdResponse parses an HTTP response from a DeleteTransactionsTransactionIdWithResponse call
func ParseDeleteTransactionsTransactionIdResponse(rsp *http.Response) (*DeleteTransactionsTransactionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTransactionsTransactionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTransactionsTransactionIdResponse parses an HTTP response from a GetTransactionsTransactionIdWithResponse call
func ParseGetTransactionsTransactionIdResponse(rsp *http.Response) (*GetTransactionsTransactionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTransactionsTransactionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Transaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutTransactionsTransactionIdResponse parses an HTTP response from a PutTransactionsTransactionIdWithResponse call
func ParsePutTransactionsTransactionIdResponse(rsp *http.Response) (*PutTransactionsTransactionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTransactionsTransactionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Transaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all transactions
	// (GET /transactions)
	GetTransactions(ctx echo.Context) error
	// Create a new transaction
	// (POST /transactions)
	PostTransactions(ctx echo.Context) error
	// Delete a specific transaction by ID
	// (DELETE /transactions/{transactionId})
	DeleteTransactionsTransactionId(ctx echo.Context, transactionId int) error
	// Get a specific transaction by ID
	// (GET /transactions/{transactionId})
	GetTransactionsTransactionId(ctx echo.Context, transactionId int) error
	// Update a specific transaction by ID
	// (PUT /transactions/{transactionId})
	PutTransactionsTransactionId(ctx echo.Context, transactionId int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransactions(ctx)
	return err
}

// PostTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) PostTransactions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTransactions(ctx)
	return err
}

// DeleteTransactionsTransactionId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTransactionsTransactionId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "transactionId" -------------
	var transactionId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "transactionId", runtime.ParamLocationPath, ctx.Param("transactionId"), &transactionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transactionId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTransactionsTransactionId(ctx, transactionId)
	return err
}

// GetTransactionsTransactionId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionsTransactionId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "transactionId" -------------
	var transactionId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "transactionId", runtime.ParamLocationPath, ctx.Param("transactionId"), &transactionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transactionId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransactionsTransactionId(ctx, transactionId)
	return err
}

// PutTransactionsTransactionId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTransactionsTransactionId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "transactionId" -------------
	var transactionId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "transactionId", runtime.ParamLocationPath, ctx.Param("transactionId"), &transactionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transactionId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTransactionsTransactionId(ctx, transactionId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/transactions", wrapper.GetTransactions)
	router.POST(baseURL+"/transactions", wrapper.PostTransactions)
	router.DELETE(baseURL+"/transactions/:transactionId", wrapper.DeleteTransactionsTransactionId)
	router.GET(baseURL+"/transactions/:transactionId", wrapper.GetTransactionsTransactionId)
	router.PUT(baseURL+"/transactions/:transactionId", wrapper.PutTransactionsTransactionId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xUPW8bMQz9KwLbUcg5bafb0gYIDHTI4E5BBllH2wpOHxGptoah/15Il8KyL6i7FOlk",
	"HT9MvvdIHkB7G7xDxwT9AUjv0Kr6XEXlSGk23pXPEH3AyAarU1mfHJcX7wNCDy7ZNUbIErRi3Pq4b5zE",
	"0bhtcU6GA6BLFvoHwJ8BHSFIME57i/Aoz5OyhIjPyUQcSkb1NlXk716OmX79hJohl1TjNr52YngsvgaV",
	"uLlfgoTvGKlihOurxdWidOkDOhUM9PCxmiQExbsKvOPjH1TDFisNhRxVjMsBerhDXrVxBQIF72hi78Ni",
	"UX4GJB1NmBiGGzEaYuE34qREAUHJWlUYha8lRI3jWYyE4OmVPu49zRt5Tkj82Q9VIe0d46SkCmE0uiZ3",
	"TzSpPs1Deb2PuIEe3nXHgelepqVrRyWfCsYxYZ7Bv/53pU9JbeXWERXjIChpjUSbNI77M3q/1BChhMMf",
	"LcU17ET67tB8LYc86Tki41yF22pvdVi1ufPp+DSfjhbIVOePQKaSQgkKqM3G6BaNWO/F8rZMzd8M74Ve",
	"F28h5YCszHi+HHfIFxEHFZVFxkjQP5yTvLyt67fDE+3LEYG+ngCQ4JQtd4RnrLQTLxvIL0fJOMZtuZD5",
	"UUJIry1rusD7f7C4b6J2CsOlxf1WQy6on3P+FQAA//+yq3EJ8AYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
